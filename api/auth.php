<?php
    // set the headers
    header("Access-Control-Allow-Origin: https://wegivesupport.net/"); // Same-Origin Policy (anti XSS)
    header('Access-Control-Allow-Methods: POST');                      // allow only POST http method
    // include the needed config files
    include_once '../config/database.php';
    include_once '../objects/agent.php';
    include_once '../help/opsupport.php';
    // include JWT necessary files
    include_once '../libs/php-jwt/src/BeforeValidException.php';
    include_once '../libs/php-jwt/src/ExpiredException.php';
    include_once '../libs/php-jwt/src/SignatureInvalidException.php';
    include_once '../libs/php-jwt/src/JWT.php';
    include_once '../libs/php-jwt/src/JWK.php';
    include_once '../libs/php-jwt/src/Key.php';
    use Firebase\JWT\JWT;
    use Firebase\JWT\Key;

    /************************************ NOTICE ************************************
    the salt is randomically generated by two functions:
    random_bytes($lenght) for generate a $lenght (12) random bytes string
    bin2hex to encode the previosly bytes string in hex string
    the password is generate by password_hash function which give
    in input the salt and password (clear) and hashing the composed
    string with blowfish algorithm
    ********************************************************************************/

    //function for the attempt authentication
    function attemptAuth(){
        // fetch all HTTP headers received from client
        $allHeaders = getallheaders();
        // check if is present the authentication
        if(!isset($allHeaders['Authorization']))
            return;
        else{
            // ...and if it's Basic            
            if(!OpSupport::startsWith(($allHeaders['Authorization']),'Basic'))
                return;
        }
        // extract the Basic Authentication base64 encoded string
        $encodedString = substr($allHeaders['Authorization'], 6);
        // decode the string
        $decodedString = base64_decode($encodedString);
        // separate username and password for next controls
        $credentials = explode(':', $decodedString);

        // get database connection
        $database = new Database();
        $db = $database->getConnection();

        // instantiate new agent object for login checking
        $agent = new Agent($db);
        $agent->username = $credentials[0];
        $agent->givenPassword = $credentials[1];

        // check if user exists
        $isUsername = $agent->usernameExists();
        if(!$isUsername){
            // set response code 401 Unauthorized
            http_response_code(401);
            return;
        }
        else{
            // check if password is correct
            $isPassword = $agent->passwordCheck();
            if(!$isPassword){
                // set response code 401 Unauthorized
                http_response_code(401);
                return;
            }
            else{
                // create JWT token to assign for nexts resources access
                $payload = array(
                    "iat" => OpSupport::getClaimJWT()[0],
                    "exp" => OpSupport::getClaimJWT()[1],
                    "iss" => OpSupport::getClaimJWT()[2],
                    "data" => array(
                        "id" => $agent->id,
                        "name" => $agent->agentName,
                        "username" => $agent->username,
                        "email" => $agent->email
                    )
                );
                // set response code 200 OK
                http_response_code(200);
                // generate JWT token
                $jwt = JWT::encode($payload, OpSupport::getClaimJWT()[3], 'HS256');
                // generate new cookie which contains the just generated JWT
                setcookie('sessionToken', $jwt, false, true);
            }
        }            
    }
    attemptAuth();
?>